from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
from .models_cadastro import pessoa
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .models_cadastro import pessoa

@csrf_exempt
def obter_token(request):
    """ Retorna o token do usu√°rio com base no usu√°rio e senha e armazena na sess√£o """
    if request.method == 'POST':
        try:
            # üõ†Ô∏è Garante que o corpo da requisi√ß√£o n√£o est√° vazio antes de decodificar JSON
            if not request.body:
                return JsonResponse({'error': 'Corpo da requisi√ß√£o vazio'}, status=400)

            data = json.loads(request.body.decode('utf-8'))  # üõ†Ô∏è Decodifica corretamente o JSON

            usuario = data.get('usuario')
            senha = data.get('senha')

            if not usuario or not senha:
                return JsonResponse({'error': 'Usu√°rio e senha s√£o obrigat√≥rios'}, status=400)

            # Busca a pessoa com base no usu√°rio e senha
            user = pessoa.objects.get(usuario=usuario, senha=senha)

            # Armazena o usu√°rio na sess√£o
            request.session['username'] = usuario
            request.session.save()

            return JsonResponse({'token': user.token})

        except json.JSONDecodeError:
            return JsonResponse({'error': 'Erro ao decodificar JSON. Verifique a estrutura da requisi√ß√£o.'}, status=400)

        except pessoa.DoesNotExist:
            return JsonResponse({'error': 'Usu√°rio ou senha incorretos'}, status=401)

    return JsonResponse({'error': 'M√©todo n√£o permitido'}, status=405)

def token_view(request):
    """ Exibe o nome do usu√°rio logado e seu token """
    usuario = request.session.get('username')  # Obt√©m o usu√°rio armazenado na sess√£o (Corrigido)

    if not usuario:
        return redirect('/login/')  # Redireciona para login se n√£o estiver autenticado

    try:
        user = pessoa.objects.get(usuario=usuario)
        token = user.token
    except pessoa.DoesNotExist:
        token = "Token n√£o encontrado"

    return render(request, 'sentiment/token.html', {'usuario': usuario, 'token': token})